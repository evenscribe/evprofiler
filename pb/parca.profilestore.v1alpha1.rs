// This file is @generated by prost-build.
/// WriteRequest may contain an apache arrow record that only contains profiling
/// samples with a reference to a stacktrace ID, or a full stacktrace. If it
/// only contains samples, the server may request the full stacktrace from the
/// client should it not already know them.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteRequest {
    /// The bytes containing the arrow record.
    #[prost(bytes = "vec", tag = "1")]
    pub record: ::prost::alloc::vec::Vec<u8>,
}
/// WriteResponse may be empty if the server doesn't need any further
/// information, or contain an arrow record that contains the stacktrace IDs
/// that are unknown and therefore requested by the client from the server.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteResponse {
    /// When record is non-empty it contains the bytes of an arrow record that
    /// contains a column containing the stacktraces that are unknown.
    #[prost(bytes = "vec", tag = "1")]
    pub record: ::prost::alloc::vec::Vec<u8>,
}
/// WriteRawRequest writes a pprof profile for a given tenant
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteRawRequest {
    /// tenant is the given tenant to store the pprof profile under
    #[deprecated]
    #[prost(string, tag = "1")]
    pub tenant: ::prost::alloc::string::String,
    /// series is a set raw pprof profiles and accompanying labels
    #[prost(message, repeated, tag = "2")]
    pub series: ::prost::alloc::vec::Vec<RawProfileSeries>,
    /// normalized is a flag indicating if the addresses in the profile is normalized for position independent code
    #[prost(bool, tag = "3")]
    pub normalized: bool,
}
/// WriteRawResponse is the empty response
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WriteRawResponse {}
/// RawProfileSeries represents the pprof profile and its associated labels
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RawProfileSeries {
    /// LabelSet is the key value pairs to identify the corresponding profile
    #[prost(message, optional, tag = "1")]
    pub labels: ::core::option::Option<LabelSet>,
    /// samples are the set of profile bytes
    #[prost(message, repeated, tag = "2")]
    pub samples: ::prost::alloc::vec::Vec<RawSample>,
}
/// Label is a key value pair of identifiers
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Label {
    /// name is the label name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// value is the value for the label name
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
/// LabelSet is a group of labels
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LabelSet {
    /// labels are the grouping of labels
    #[prost(message, repeated, tag = "1")]
    pub labels: ::prost::alloc::vec::Vec<Label>,
}
/// RawSample is the set of bytes that correspond to a pprof profile
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RawSample {
    /// raw_profile is the set of bytes of the pprof profile
    #[prost(bytes = "vec", tag = "1")]
    pub raw_profile: ::prost::alloc::vec::Vec<u8>,
    /// information about the executable and executable section for normalizaton
    /// purposes.
    #[prost(message, repeated, tag = "2")]
    pub executable_info: ::prost::alloc::vec::Vec<ExecutableInfo>,
}
/// ExecutableInfo is the information about the executable and executable
/// section for normalizaton purposes before symbolization.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExecutableInfo {
    /// elf_type is the type of the elf executable. Technically the elf type is a
    /// 16 bit integer, but protobuf's smallest unsigned integer is 32 bits.
    #[prost(uint32, tag = "1")]
    pub elf_type: u32,
    /// load_segment is the load segment of the executable.
    #[prost(message, optional, tag = "2")]
    pub load_segment: ::core::option::Option<LoadSegment>,
}
/// LoadSegment is the load segment of the executable
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LoadSegment {
    /// The offset from the beginning of the file at which the first byte of the segment resides.
    #[prost(uint64, tag = "1")]
    pub offset: u64,
    /// The virtual address at which the first byte of the segment resides in memory.
    #[prost(uint64, tag = "2")]
    pub vaddr: u64,
}
/// AgentsRequest is the request to retrieve a list of agents
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AgentsRequest {}
/// AgentsResponse is the request to retrieve a list of agents
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AgentsResponse {
    /// agents is a list of agents
    #[prost(message, repeated, tag = "1")]
    pub agents: ::prost::alloc::vec::Vec<Agent>,
}
/// Agent is the agent representation
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agent {
    /// id is the agent identity that either represent by the node name or the IP address.
    /// When node name is not found, this will fallback to IP address.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// last_error is the error message most recently received from a push attempt
    #[prost(string, tag = "2")]
    pub last_error: ::prost::alloc::string::String,
    /// last_push is the time stamp the last push request was performed
    #[prost(message, optional, tag = "3")]
    pub last_push: ::core::option::Option<::prost_types::Timestamp>,
    /// last_push_duration is the duration of the last push request
    #[prost(message, optional, tag = "4")]
    pub last_push_duration: ::core::option::Option<::prost_types::Duration>,
}
/// Generated server implementations.
pub mod profile_store_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ProfileStoreServiceServer.
    #[async_trait]
    pub trait ProfileStoreService: std::marker::Send + std::marker::Sync + 'static {
        /// WriteRaw accepts a raw set of bytes of a pprof file
        async fn write_raw(
            &self,
            request: tonic::Request<super::WriteRawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WriteRawResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the Write method.
        type WriteStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::WriteResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Write accepts profiling data encoded as an arrow record. It's a
        /// bi-directional streaming RPC, because the first message can contain only
        /// samples without the stacktraces, and only reference stacktrace IDs. The
        /// backend can then request the full stacktrace from the client should it not
        /// know the stacktrace yet.
        async fn write(
            &self,
            request: tonic::Request<tonic::Streaming<super::WriteRequest>>,
        ) -> std::result::Result<tonic::Response<Self::WriteStream>, tonic::Status>;
    }
    /// ProfileStoreService is the service the accepts pprof writes
    #[derive(Debug)]
    pub struct ProfileStoreServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ProfileStoreServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ProfileStoreServiceServer<T>
    where
        T: ProfileStoreService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/parca.profilestore.v1alpha1.ProfileStoreService/WriteRaw" => {
                    #[allow(non_camel_case_types)]
                    struct WriteRawSvc<T: ProfileStoreService>(pub Arc<T>);
                    impl<
                        T: ProfileStoreService,
                    > tonic::server::UnaryService<super::WriteRawRequest>
                    for WriteRawSvc<T> {
                        type Response = super::WriteRawResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::WriteRawRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProfileStoreService>::write_raw(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WriteRawSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/parca.profilestore.v1alpha1.ProfileStoreService/Write" => {
                    #[allow(non_camel_case_types)]
                    struct WriteSvc<T: ProfileStoreService>(pub Arc<T>);
                    impl<
                        T: ProfileStoreService,
                    > tonic::server::StreamingService<super::WriteRequest>
                    for WriteSvc<T> {
                        type Response = super::WriteResponse;
                        type ResponseStream = T::WriteStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::WriteRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProfileStoreService>::write(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WriteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ProfileStoreServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "parca.profilestore.v1alpha1.ProfileStoreService";
    impl<T> tonic::server::NamedService for ProfileStoreServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod agents_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AgentsServiceServer.
    #[async_trait]
    pub trait AgentsService: std::marker::Send + std::marker::Sync + 'static {
        /// Agents return the agents that pushed data to the server
        async fn agents(
            &self,
            request: tonic::Request<super::AgentsRequest>,
        ) -> std::result::Result<tonic::Response<super::AgentsResponse>, tonic::Status>;
    }
    /// AgentsService maintains the agents
    #[derive(Debug)]
    pub struct AgentsServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> AgentsServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for AgentsServiceServer<T>
    where
        T: AgentsService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/parca.profilestore.v1alpha1.AgentsService/Agents" => {
                    #[allow(non_camel_case_types)]
                    struct AgentsSvc<T: AgentsService>(pub Arc<T>);
                    impl<
                        T: AgentsService,
                    > tonic::server::UnaryService<super::AgentsRequest>
                    for AgentsSvc<T> {
                        type Response = super::AgentsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AgentsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AgentsService>::agents(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AgentsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for AgentsServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "parca.profilestore.v1alpha1.AgentsService";
    impl<T> tonic::server::NamedService for AgentsServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
