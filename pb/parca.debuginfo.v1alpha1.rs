// This file is @generated by prost-build.
/// ShouldInitiateUploadRequest is the request for ShouldInitiateUpload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShouldInitiateUploadRequest {
    /// The build_id of the debuginfo.
    #[prost(string, tag = "1")]
    pub build_id: ::prost::alloc::string::String,
    /// Hash of the debuginfo to upload.
    #[prost(string, tag = "2")]
    pub hash: ::prost::alloc::string::String,
    /// Force uploading even if valid debuginfos are already available.
    #[prost(bool, tag = "3")]
    pub force: bool,
    /// Type of debuginfo to propose uploading.
    #[prost(enumeration = "DebuginfoType", tag = "4")]
    pub r#type: i32,
    /// Type of build ID.
    #[prost(enumeration = "BuildIdType", tag = "5")]
    pub build_id_type: i32,
}
/// ShouldInitiateUploadResponse is the response for ShouldInitiateUpload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShouldInitiateUploadResponse {
    /// Whether an upload should be initiated or not.
    #[prost(bool, tag = "1")]
    pub should_initiate_upload: bool,
    /// Reason for why an upload should be initiated or not.
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
}
/// InitiateUploadRequest is the request to initiate an upload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateUploadRequest {
    /// The build_id of the debug info to upload.
    #[prost(string, tag = "1")]
    pub build_id: ::prost::alloc::string::String,
    /// The size of the debug info to upload.
    #[prost(int64, tag = "2")]
    pub size: i64,
    /// Hash of the debuginfo to upload.
    #[prost(string, tag = "3")]
    pub hash: ::prost::alloc::string::String,
    /// Force uploading even if valid debuginfos are already available.
    #[prost(bool, tag = "4")]
    pub force: bool,
    /// Type of debuginfo to propose uploading.
    #[prost(enumeration = "DebuginfoType", tag = "5")]
    pub r#type: i32,
    /// Type of build ID.
    #[prost(enumeration = "BuildIdType", tag = "6")]
    pub build_id_type: i32,
}
/// InitiateUploadResponse is the response to an InitiateUploadRequest.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateUploadResponse {
    /// UploadInstructions contains the instructions for the client to upload the debuginfo.
    #[prost(message, optional, tag = "1")]
    pub upload_instructions: ::core::option::Option<UploadInstructions>,
}
/// UploadInstructions contains the instructions for the client to upload debuginfo.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadInstructions {
    /// The build ID of the debuginfo to upload.
    #[prost(string, tag = "1")]
    pub build_id: ::prost::alloc::string::String,
    /// The upload_id to use for uploading.
    #[prost(string, tag = "2")]
    pub upload_id: ::prost::alloc::string::String,
    /// The strategy to use for uploading.
    #[prost(enumeration = "upload_instructions::UploadStrategy", tag = "3")]
    pub upload_strategy: i32,
    /// The signed url to use for uploading using a PUT request when the upload
    /// strategy is SIGNED_STRATEGY_URL.
    #[prost(string, tag = "4")]
    pub signed_url: ::prost::alloc::string::String,
    /// Type of debuginfo the upload instructions are for.
    #[prost(enumeration = "DebuginfoType", tag = "5")]
    pub r#type: i32,
}
/// Nested message and enum types in `UploadInstructions`.
pub mod upload_instructions {
    /// The strategy to use for uploading.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum UploadStrategy {
        /// The upload is not allowed.
        Unspecified = 0,
        /// The upload is allowed and should be done via the Upload RPC.
        Grpc = 1,
        /// The upload is allowed and should be done via a returned signed URL.
        SignedUrl = 2,
    }
    impl UploadStrategy {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UPLOAD_STRATEGY_UNSPECIFIED",
                Self::Grpc => "UPLOAD_STRATEGY_GRPC",
                Self::SignedUrl => "UPLOAD_STRATEGY_SIGNED_URL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UPLOAD_STRATEGY_UNSPECIFIED" => Some(Self::Unspecified),
                "UPLOAD_STRATEGY_GRPC" => Some(Self::Grpc),
                "UPLOAD_STRATEGY_SIGNED_URL" => Some(Self::SignedUrl),
                _ => None,
            }
        }
    }
}
/// MarkUploadFinishedRequest is the request to mark an upload as finished.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkUploadFinishedRequest {
    /// The build_id of the debug info to mark as finished.
    #[prost(string, tag = "1")]
    pub build_id: ::prost::alloc::string::String,
    /// The upload_id of the debug info to mark as finished.
    #[prost(string, tag = "2")]
    pub upload_id: ::prost::alloc::string::String,
    /// The type of debuginfo upload to mark as finished.
    #[prost(enumeration = "DebuginfoType", tag = "3")]
    pub r#type: i32,
}
/// MarkUploadFinishedResponse is the response to a MarkUploadFinishedRequest.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkUploadFinishedResponse {}
/// UploadRequest upload debug info
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadRequest {
    /// data contains either the upload info metadata or the debug info
    #[prost(oneof = "upload_request::Data", tags = "1, 2")]
    pub data: ::core::option::Option<upload_request::Data>,
}
/// Nested message and enum types in `UploadRequest`.
pub mod upload_request {
    /// data contains either the upload info metadata or the debug info
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        /// info is the metadata for the debug info
        #[prost(message, tag = "1")]
        Info(super::UploadInfo),
        /// chunk_data is the raw bytes of the debug info
        #[prost(bytes, tag = "2")]
        ChunkData(::prost::alloc::vec::Vec<u8>),
    }
}
/// UploadInfo contains the build_id and other metadata for the debug data
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadInfo {
    /// build_id is a unique identifier for the debug data
    #[prost(string, tag = "1")]
    pub build_id: ::prost::alloc::string::String,
    /// upload_id is a unique identifier for the upload
    #[prost(string, tag = "2")]
    pub upload_id: ::prost::alloc::string::String,
    /// the type of debuginfo that's being uploaded
    #[prost(enumeration = "DebuginfoType", tag = "3")]
    pub r#type: i32,
}
/// UploadResponse returns the build_id and the size of the uploaded debug info
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadResponse {
    /// build_id is a unique identifier for the debug data
    #[prost(string, tag = "1")]
    pub build_id: ::prost::alloc::string::String,
    /// size is the number of bytes of the debug info
    #[prost(uint64, tag = "2")]
    pub size: u64,
}
/// Debuginfo contains metadata about a debuginfo file.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Debuginfo {
    /// BuildID is the build ID of the debuginfo.
    #[prost(string, tag = "1")]
    pub build_id: ::prost::alloc::string::String,
    /// Source is the source of the debuginfo.
    #[prost(enumeration = "debuginfo::Source", tag = "2")]
    pub source: i32,
    /// DebuginfoUpload is the debuginfo upload metadata.
    #[prost(message, optional, tag = "3")]
    pub upload: ::core::option::Option<DebuginfoUpload>,
    /// Quality is the quality of the debuginfo. This is set asynchonously by the
    /// symbolizer when the debuginfo is actually used.
    #[prost(message, optional, tag = "4")]
    pub quality: ::core::option::Option<DebuginfoQuality>,
    /// The debuginfod servers this piece of debuginfo is available at.
    #[prost(string, repeated, tag = "5")]
    pub debuginfod_servers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The type of debuginfo.
    #[prost(enumeration = "DebuginfoType", tag = "6")]
    pub r#type: i32,
}
/// Nested message and enum types in `Debuginfo`.
pub mod debuginfo {
    /// Source is the source of the debuginfo.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Source {
        /// To understand when no source is set we have the unknown source.
        UnknownUnspecified = 0,
        /// The debuginfo was uploaded by a user/agent.
        Upload = 1,
        /// The debuginfo is available from the configured debuginfod server(s).
        Debuginfod = 2,
    }
    impl Source {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::UnknownUnspecified => "SOURCE_UNKNOWN_UNSPECIFIED",
                Self::Upload => "SOURCE_UPLOAD",
                Self::Debuginfod => "SOURCE_DEBUGINFOD",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SOURCE_UNKNOWN_UNSPECIFIED" => Some(Self::UnknownUnspecified),
                "SOURCE_UPLOAD" => Some(Self::Upload),
                "SOURCE_DEBUGINFOD" => Some(Self::Debuginfod),
                _ => None,
            }
        }
    }
}
/// DebuginfoUpload contains metadata about a debuginfo upload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DebuginfoUpload {
    /// UploadID is the ID of the debuginfo upload.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Hash is the hash of the debuginfo.
    #[prost(string, tag = "2")]
    pub hash: ::prost::alloc::string::String,
    /// State is the current state of the debuginfo upload.
    #[prost(enumeration = "debuginfo_upload::State", tag = "3")]
    pub state: i32,
    /// StartedAt is the time the debuginfo upload was started.
    #[prost(message, optional, tag = "4")]
    pub started_at: ::core::option::Option<::prost_types::Timestamp>,
    /// FinishedAt is the time the debuginfo upload was finished.
    #[prost(message, optional, tag = "5")]
    pub finished_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// Nested message and enum types in `DebuginfoUpload`.
pub mod debuginfo_upload {
    /// The state of the debuginfo upload.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// To understand when no upload state is set we have the unknown state.
        UnknownUnspecified = 0,
        /// The debuginfo is currently being uploaded.
        Uploading = 1,
        /// The debuginfo has been uploaded successfully.
        Uploaded = 2,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::UnknownUnspecified => "STATE_UNKNOWN_UNSPECIFIED",
                Self::Uploading => "STATE_UPLOADING",
                Self::Uploaded => "STATE_UPLOADED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNKNOWN_UNSPECIFIED" => Some(Self::UnknownUnspecified),
                "STATE_UPLOADING" => Some(Self::Uploading),
                "STATE_UPLOADED" => Some(Self::Uploaded),
                _ => None,
            }
        }
    }
}
/// DebuginfoQuality is the quality of the debuginfo.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DebuginfoQuality {
    /// The debuginfo file is not a valid ELF file.
    #[prost(bool, tag = "1")]
    pub not_valid_elf: bool,
    /// Whether the debuginfo contains dwarf information.
    #[prost(bool, tag = "2")]
    pub has_dwarf: bool,
    /// Whether the debuginfo contains Go's pclntab.
    #[prost(bool, tag = "3")]
    pub has_go_pclntab: bool,
    /// Whether the debuginfo contains symtab.
    #[prost(bool, tag = "4")]
    pub has_symtab: bool,
    /// Whether the debuginfo contains dynsym.
    #[prost(bool, tag = "5")]
    pub has_dynsym: bool,
}
/// Types of debuginfo.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DebuginfoType {
    /// The default type that the API always supported. This type is expected to
    /// contain debuginfos for symbolizaton purposes.
    DebuginfoUnspecified = 0,
    /// The type to identify executables. This is meant to be used for
    /// disassembling so it is expected to contain executable `.text` section.
    Executable = 1,
    /// The type to identify a source tarball. This is expected to contain
    /// multiple source files that debuginfo references. It is meant to show code
    /// with profiling data inline.
    Sources = 2,
}
impl DebuginfoType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DebuginfoUnspecified => "DEBUGINFO_TYPE_DEBUGINFO_UNSPECIFIED",
            Self::Executable => "DEBUGINFO_TYPE_EXECUTABLE",
            Self::Sources => "DEBUGINFO_TYPE_SOURCES",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEBUGINFO_TYPE_DEBUGINFO_UNSPECIFIED" => Some(Self::DebuginfoUnspecified),
            "DEBUGINFO_TYPE_EXECUTABLE" => Some(Self::Executable),
            "DEBUGINFO_TYPE_SOURCES" => Some(Self::Sources),
            _ => None,
        }
    }
}
/// BuildIDType is the type of build ID.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BuildIdType {
    /// The build ID is unknown.
    UnknownUnspecified = 0,
    /// The build ID is a GNU build ID.
    Gnu = 1,
    /// The build ID is an opaque hash.
    Hash = 2,
    /// The build ID is a Go build ID.
    Go = 3,
}
impl BuildIdType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownUnspecified => "BUILD_ID_TYPE_UNKNOWN_UNSPECIFIED",
            Self::Gnu => "BUILD_ID_TYPE_GNU",
            Self::Hash => "BUILD_ID_TYPE_HASH",
            Self::Go => "BUILD_ID_TYPE_GO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BUILD_ID_TYPE_UNKNOWN_UNSPECIFIED" => Some(Self::UnknownUnspecified),
            "BUILD_ID_TYPE_GNU" => Some(Self::Gnu),
            "BUILD_ID_TYPE_HASH" => Some(Self::Hash),
            "BUILD_ID_TYPE_GO" => Some(Self::Go),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod debuginfo_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with DebuginfoServiceServer.
    #[async_trait]
    pub trait DebuginfoService: std::marker::Send + std::marker::Sync + 'static {
        /// Upload ingests debug info for a given build_id
        async fn upload(
            &self,
            request: tonic::Request<tonic::Streaming<super::UploadRequest>>,
        ) -> std::result::Result<tonic::Response<super::UploadResponse>, tonic::Status>;
        /// ShouldInitiateUpload returns whether an upload for a given build_id should be initiated or not.
        async fn should_initiate_upload(
            &self,
            request: tonic::Request<super::ShouldInitiateUploadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ShouldInitiateUploadResponse>,
            tonic::Status,
        >;
        /// InitiateUpload returns a strategy and information to upload debug info for a given build_id.
        async fn initiate_upload(
            &self,
            request: tonic::Request<super::InitiateUploadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InitiateUploadResponse>,
            tonic::Status,
        >;
        /// MarkUploadFinished marks the upload as finished for a given build_id.
        async fn mark_upload_finished(
            &self,
            request: tonic::Request<super::MarkUploadFinishedRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MarkUploadFinishedResponse>,
            tonic::Status,
        >;
    }
    /// DebuginfoService is a service that allows storage of debug info
    #[derive(Debug)]
    pub struct DebuginfoServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> DebuginfoServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for DebuginfoServiceServer<T>
    where
        T: DebuginfoService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/parca.debuginfo.v1alpha1.DebuginfoService/Upload" => {
                    #[allow(non_camel_case_types)]
                    struct UploadSvc<T: DebuginfoService>(pub Arc<T>);
                    impl<
                        T: DebuginfoService,
                    > tonic::server::ClientStreamingService<super::UploadRequest>
                    for UploadSvc<T> {
                        type Response = super::UploadResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::UploadRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DebuginfoService>::upload(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UploadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.client_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/parca.debuginfo.v1alpha1.DebuginfoService/ShouldInitiateUpload" => {
                    #[allow(non_camel_case_types)]
                    struct ShouldInitiateUploadSvc<T: DebuginfoService>(pub Arc<T>);
                    impl<
                        T: DebuginfoService,
                    > tonic::server::UnaryService<super::ShouldInitiateUploadRequest>
                    for ShouldInitiateUploadSvc<T> {
                        type Response = super::ShouldInitiateUploadResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShouldInitiateUploadRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DebuginfoService>::should_initiate_upload(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ShouldInitiateUploadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/parca.debuginfo.v1alpha1.DebuginfoService/InitiateUpload" => {
                    #[allow(non_camel_case_types)]
                    struct InitiateUploadSvc<T: DebuginfoService>(pub Arc<T>);
                    impl<
                        T: DebuginfoService,
                    > tonic::server::UnaryService<super::InitiateUploadRequest>
                    for InitiateUploadSvc<T> {
                        type Response = super::InitiateUploadResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InitiateUploadRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DebuginfoService>::initiate_upload(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InitiateUploadSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/parca.debuginfo.v1alpha1.DebuginfoService/MarkUploadFinished" => {
                    #[allow(non_camel_case_types)]
                    struct MarkUploadFinishedSvc<T: DebuginfoService>(pub Arc<T>);
                    impl<
                        T: DebuginfoService,
                    > tonic::server::UnaryService<super::MarkUploadFinishedRequest>
                    for MarkUploadFinishedSvc<T> {
                        type Response = super::MarkUploadFinishedResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MarkUploadFinishedRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DebuginfoService>::mark_upload_finished(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = MarkUploadFinishedSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for DebuginfoServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "parca.debuginfo.v1alpha1.DebuginfoService";
    impl<T> tonic::server::NamedService for DebuginfoServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
